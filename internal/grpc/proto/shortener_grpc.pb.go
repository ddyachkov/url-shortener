// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: internal/grpc/proto/shortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shortener_CreateShortURL_FullMethodName      = "/proto.Shortener/CreateShortURL"
	Shortener_CreateBatchShortURL_FullMethodName = "/proto.Shortener/CreateBatchShortURL"
	Shortener_GetFullURL_FullMethodName          = "/proto.Shortener/GetFullURL"
	Shortener_GetUserURL_FullMethodName          = "/proto.Shortener/GetUserURL"
	Shortener_DeleteUserURL_FullMethodName       = "/proto.Shortener/DeleteUserURL"
	Shortener_GetShortenerStats_FullMethodName   = "/proto.Shortener/GetShortenerStats"
)

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	CreateShortURL(ctx context.Context, in *CreateShortURLRequest, opts ...grpc.CallOption) (*CreateShortURLResponce, error)
	CreateBatchShortURL(ctx context.Context, in *CreateBatchShortURLRequest, opts ...grpc.CallOption) (*CreateBatchShortURLResponce, error)
	GetFullURL(ctx context.Context, in *GetFullURLRequest, opts ...grpc.CallOption) (*GetFullURLResponce, error)
	GetUserURL(ctx context.Context, in *GetUserURLRequest, opts ...grpc.CallOption) (*GetUserURLResponce, error)
	DeleteUserURL(ctx context.Context, in *DeleteUserURLRequest, opts ...grpc.CallOption) (*DeleteUserURLResponce, error)
	GetShortenerStats(ctx context.Context, in *GetShortenerStatsRequest, opts ...grpc.CallOption) (*GetShortenerStatsResponce, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) CreateShortURL(ctx context.Context, in *CreateShortURLRequest, opts ...grpc.CallOption) (*CreateShortURLResponce, error) {
	out := new(CreateShortURLResponce)
	err := c.cc.Invoke(ctx, Shortener_CreateShortURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) CreateBatchShortURL(ctx context.Context, in *CreateBatchShortURLRequest, opts ...grpc.CallOption) (*CreateBatchShortURLResponce, error) {
	out := new(CreateBatchShortURLResponce)
	err := c.cc.Invoke(ctx, Shortener_CreateBatchShortURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetFullURL(ctx context.Context, in *GetFullURLRequest, opts ...grpc.CallOption) (*GetFullURLResponce, error) {
	out := new(GetFullURLResponce)
	err := c.cc.Invoke(ctx, Shortener_GetFullURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetUserURL(ctx context.Context, in *GetUserURLRequest, opts ...grpc.CallOption) (*GetUserURLResponce, error) {
	out := new(GetUserURLResponce)
	err := c.cc.Invoke(ctx, Shortener_GetUserURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) DeleteUserURL(ctx context.Context, in *DeleteUserURLRequest, opts ...grpc.CallOption) (*DeleteUserURLResponce, error) {
	out := new(DeleteUserURLResponce)
	err := c.cc.Invoke(ctx, Shortener_DeleteUserURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetShortenerStats(ctx context.Context, in *GetShortenerStatsRequest, opts ...grpc.CallOption) (*GetShortenerStatsResponce, error) {
	out := new(GetShortenerStatsResponce)
	err := c.cc.Invoke(ctx, Shortener_GetShortenerStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility
type ShortenerServer interface {
	CreateShortURL(context.Context, *CreateShortURLRequest) (*CreateShortURLResponce, error)
	CreateBatchShortURL(context.Context, *CreateBatchShortURLRequest) (*CreateBatchShortURLResponce, error)
	GetFullURL(context.Context, *GetFullURLRequest) (*GetFullURLResponce, error)
	GetUserURL(context.Context, *GetUserURLRequest) (*GetUserURLResponce, error)
	DeleteUserURL(context.Context, *DeleteUserURLRequest) (*DeleteUserURLResponce, error)
	GetShortenerStats(context.Context, *GetShortenerStatsRequest) (*GetShortenerStatsResponce, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (UnimplementedShortenerServer) CreateShortURL(context.Context, *CreateShortURLRequest) (*CreateShortURLResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortURL not implemented")
}
func (UnimplementedShortenerServer) CreateBatchShortURL(context.Context, *CreateBatchShortURLRequest) (*CreateBatchShortURLResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchShortURL not implemented")
}
func (UnimplementedShortenerServer) GetFullURL(context.Context, *GetFullURLRequest) (*GetFullURLResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullURL not implemented")
}
func (UnimplementedShortenerServer) GetUserURL(context.Context, *GetUserURLRequest) (*GetUserURLResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserURL not implemented")
}
func (UnimplementedShortenerServer) DeleteUserURL(context.Context, *DeleteUserURLRequest) (*DeleteUserURLResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserURL not implemented")
}
func (UnimplementedShortenerServer) GetShortenerStats(context.Context, *GetShortenerStatsRequest) (*GetShortenerStatsResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortenerStats not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_CreateShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).CreateShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_CreateShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).CreateShortURL(ctx, req.(*CreateShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_CreateBatchShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).CreateBatchShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_CreateBatchShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).CreateBatchShortURL(ctx, req.(*CreateBatchShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetFullURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetFullURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetFullURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetFullURL(ctx, req.(*GetFullURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetUserURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetUserURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetUserURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetUserURL(ctx, req.(*GetUserURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_DeleteUserURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).DeleteUserURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_DeleteUserURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).DeleteUserURL(ctx, req.(*DeleteUserURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetShortenerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortenerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetShortenerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetShortenerStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetShortenerStats(ctx, req.(*GetShortenerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortURL",
			Handler:    _Shortener_CreateShortURL_Handler,
		},
		{
			MethodName: "CreateBatchShortURL",
			Handler:    _Shortener_CreateBatchShortURL_Handler,
		},
		{
			MethodName: "GetFullURL",
			Handler:    _Shortener_GetFullURL_Handler,
		},
		{
			MethodName: "GetUserURL",
			Handler:    _Shortener_GetUserURL_Handler,
		},
		{
			MethodName: "DeleteUserURL",
			Handler:    _Shortener_DeleteUserURL_Handler,
		},
		{
			MethodName: "GetShortenerStats",
			Handler:    _Shortener_GetShortenerStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/proto/shortener.proto",
}
